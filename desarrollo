# -- coding: utf-8 -- 

import os, sys

try:
    from osgeo import ogr, gdal
    from osgeo.gdalconst import *
    import numpy as np
  
except ImportError:
    import ogr, gdal
    from gdalconst import *
    import numpy as np

# this allows GDAL to throw Python Exceptions
gdal.UseExceptions()

#definimos el directorio
os.chdir(r'C:')

##################################################################################################################
#abrimos las bandas
#Componemos una imagen multibanda uniendo todas las bandas
#reproyeccion
#recortar al area de interes
#conocer la informacion de la imagen
# lo separamos por bandas por si hubiera algun error en alguna de ellas
#dar a elegir con que satelite trabajaremos primero
inpunt ('Satelite con el que quiere trabajar primero (Landsat 5 o Landsat 8):  ')



B1LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B2.tif')
B2LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B3.tif')
B3LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B4.tif')
B4LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B5.tif')
B5LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B6.tif')
B6LS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B7.tif')

B1LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B1.tif')
B2LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B2.tif')
B3LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B3.tif')
B4LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B4.tif')
B5LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B5.tif')
B6LS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B6.tif')

#coordenadas por las que queremos recortar la imagen multibanda
X1: 441224,7  Y1: 4209019
X2: 476943,6  Y2: 4209019
X3: 476903,9  Y3: 4187468
X4: 441264,4  Y4: 4187310


#Lo que se predente realizar es analizar los cambios de usos del suelo a partir de la utilización de imágenes de dos satélites distintos (Landsat5 y Landsat8). 
#Lo primero, que habría que poner es info y tratamiento sobre las imágenes, el recorte y todo. O sea exprimir al máximo, lo que se puede hacer con dos imágenes.
#Hacer una función para elegir entre una y otra, importante poner la fecha porque no es la misma para ambos satélites.
#Despues es necesario hacer otra función donde se elija que índice de vegetación se va a utilizar NDVI, EVI o el que sea.
#Hay que crear la función para comparar ambas imágenes del NDVI y ver las diferencias si la hay. Espero que la haya sino estamos en la mierda.
#A partir de ahí ya….estuve buscando como seguir, en plan sacar estadísticas áreas y tal, lo que no se es si sería conveniente pasar de raster a vectorial para hacer más cosas. 
#Porque las posibilidades en vectorial aumentan, hay más cosillas. 

# Delinea ela area que se pretende recortar
grid.catchment(data='dir', x=x, y=y, dirmap=dirmap, out_name='catch',
               recursionlimit=15000, xytype='label', nodata_out=0)
               
#Recorta la caja o imagen incial al clip que se especifica en las lineas anteriores
grid.clip_to('catch')
# Get a view of the catchment
demView = grid.view('dem', nodata=np.nan)
plotFigure(demView,'Elevation')
#export selected raster
grid.to_raster(demView, '../Output/clippedElevations.tif')

#obtengo la informacion de la zona recortada
#Esto sirve para saber los metadatos, se podría meter también no se lo que saldría hay que probarlo. Se puede poner una función en plan si quieres ver los metadatos Escribe SI, sino nada.
print(Landsat8.GetMetadata())
print(Landsat5.GetMetadata())

#ahora para la info de las bandas
#Using the documentation on the Band API
def Usage():
    print("""
    $ getrasterband.py [ band number ] input-raster
    """)
    sys.exit(1)

def main( band_num, input_file ):
    src_ds = gdal.Open( input_file )
    if src_ds is None:
        print 'Unable to open %s' % input_file
        sys.exit(1)

    try:
        srcband = src_ds.GetRasterBand(band_num)
    except RuntimeError, e:
        print 'No band %i found' % band_num
        print e
        sys.exit(1)


    print "[ NO DATA VALUE ] = ", srcband.GetNoDataValue()
    print "[ MIN ] = ", srcband.GetMinimum()
    print "[ MAX ] = ", srcband.GetMaximum()
    print "[ SCALE ] = ", srcband.GetScale()
    print "[ UNIT TYPE ] = ", srcband.GetUnitType()
    ctable = srcband.GetColorTable()

    if ctable is None:
        print 'No ColorTable found'
        sys.exit(1)

    print "[ COLOR TABLE COUNT ] = ", ctable.GetCount()
    for i in range( 0, ctable.GetCount() ):
        entry = ctable.GetColorEntry( i )
        if not entry:
            continue
        print "[ COLOR ENTRY RGB ] = ", ctable.GetColorEntryAsRGB( i, entry )

if __name__ == '__main__':

    if len( sys.argv ) < 3:
        print """
        [ ERROR ] you must supply at least two arguments:
        1) the band number to retrieve and 2) input raster
        """
        Usage()

    main( int(sys.argv[1]), sys.argv[2] )
