# -- coding: utf-8 -- 
# se va a proceder a observar el cambio en el uso ocupado por vegetacion con diferentes sensosres (landsat 5 y landsat 8), asi como con diferentes indices (NDVI y GCI)
import os, sys

try:
    from osgeo import ogr, gdal
    from osgeo.gdalconst import *
    import numpy as np
    import arcpy
  
except ImportError:
    import ogr, gdal
    from gdalconst import *
    import numpy as np
    import arcpy

# this allows GDAL to throw Python Exceptions
gdal.UseExceptions()

#definimos el directorio
os.chdir(r'C:\landsat')

##################################################################################################################
#abrimos las bandas


VerdeLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B3.tif')
RojoLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B4.tif')
NIRLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B5.tif')


VerdeLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B2.tif')
RojoLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B3.tif')
NIRLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B4.tif')

#de momento no lo utilizamos
#Componemos una imagen multibanda uniendo todas las bandas
landsat8= arcpy.CompositeBands_management(["VerdeLS8, RojoLS8, NIRLS8"], "Landsat8_mb.tif") 
              
landsat5= arcpy.CompositeBands_management(["VerdeLS5","RojoLS5","NIRLS5"], "Landsat5_mb.tif")


#reproyeccion
reprojected_raster = arcpy.ia.Reproject(input_raster, {"wkid" : 25830})


#recortar al area de interes

#Lo vamos a recortar con un recorte que esta en shp hay que pasarlo a tif y tulizarlo para recortar las capas
arcpy.Clip_management('C:/TP5/EJ4/Mosaico.tif','#','C:/TP5/EJ4/recortado.tif','C:/TP5/EJ4/corredor_henares.shp')   
#El primero es la capa a recortar, el segundo es el nombre que le damos y el ultimo es la capa que se utiliza para recortar el # es si se utilizara con coordenadas

#conocer la informacion de la imagen
# lo separamos por bandas por si hubiera algun error en alguna de ellas
#dar a elegir con que satelite trabajaremos primero
consulta1 = input ('Escoja el primer satélite con el que quiere trabajar. Para Landsat 5, teclee 1 y Landsat 8, teclee 2):  ')
consulta2 = input ('Escoja el satélite con el que quiere trabajar. Para Landsat 5, teclee 1 y Landsat 8, teclee 2):  ')
print(consulta1)

#obtengo la informacion de la zona recortada
#la info de las bandas
#Ruta actual
#definimos los parametros que queremos conocer
#el índice de banda comienza en 1 en lugar de 0.
#al utilizarse las bandas verde, rojo y NIR unicamenta para calcular los indices de interes (NDVI y GCI)
#Se le da orden o valor 1 al verde, 2 al rojo y 3 al NIR en los dos satelites al hacer la composicion

def information():
    in_ds = gdal.Open() #añadir nombre de la composicion
    in_band = in_ds.GetRasterBand()
    in_data = in_band.ReadAsArray()
    out_band = in_ds.GetRasterBand()
    out_band.WriteArray(in_data)
    print
    
    in_ds.FlushCache() #which writes the data to disk
    for i in range(1, 4):
        in_ds.GetRasterBand(i).ComputeStatistics(False)
 
    in_ds.BuildOverviews('average', [2, 4, 8, 16, 32])
    del in_ds

information (landsat5)
information (landsat8)
    

#dar a elegir con que indice
consulta = input ('Escoja el índice con el que quiere trabajar. Para NDVI, teclee 1 y GCI, teclee 2):  ')

print(consulta)

#definir funcion para calcular indices NDVI y GCI
# obtener bandas y tamaños de bloques

# Allow division by zero
numpy.seterr(divide='ignore', invalid='ignore')


def calcNDVI(self, filePath, outFilePath):
    # Open the inputted dataset
    dataset = gdal.Open( filePath, gdal.GA_ReadOnly )
    # Check the dataset was successfully opened
    if dataset is None:
        print ("The dataset could not opened")
        sys.exit(-1)

    # Create the output dataset
    outDataset = self.createOutputImage(outFilePath, dataset)
    # Check the datasets was successfully created.
    if outDataset is None:
        print ('Could not create output image')
        sys.exit(-1)

    # Get hold of the RED and NIR image bands from the image
    # Note that the image bands have been hard coded
    # in this case for the Landsat sensor. RED = 3
    # and NIR = 4 this might need to be changed if
    # data from another sensor was used.
    red_band = dataset.GetRasterBand(3) # RED BAND
    nir_band = dataset.GetRasterBand(4) # NIR BAND
    # Retrieve the number of lines within the image
    numLines = red_band.YSize
    # Loop through each line in turn.
    for line in range(numLines):
        # Define variable for output line.
        outputLine = ''
        # Read in data for the current line from the
        # image band representing the red wavelength
        red_scanline = red_band.ReadRaster( 0, line, red_band.XSize, 1, \
            red_band.XSize, 1, gdal.GDT_Float32 )
        # Unpack the line of data to be read as floating point data
        red_tuple = struct.unpack('f' * red_band.XSize, red_scanline)

        # Read in data for the current line from the
        # image band representing the NIR wavelength
        nir_scanline = nir_band.ReadRaster( 0, line, nir_band.XSize, 1, \
            nir_band.XSize, 1, gdal.GDT_Float32 )
        # Unpack the line of data to be read as floating point data
        nir_tuple = struct.unpack('f' * nir_band.XSize, nir_scanline)

        # Loop through the columns within the image
        for i in range(len(red_tuple)):
            #Calculate the NDVI for the current pixel.
            ndvi_lower = (nir_tuple[i] + red_tuple[i])
            ndvi_upper = (nir_tuple[i] - red_tuple[i])
            ndvi = 0
            #Be careful of zero divide
            if ndvi_lower == 0:
                ndvi = 0
            else:
                ndvi = ndvi_upper/ndvi_lower
                # Add the current pixel to the output line
                outputLine = outputLine + struct.pack('f', ndvi)
          # Write the completed line to the output image
                outDataset.GetRasterBand(1).WriteRaster(0, line, red_band.XSize, 1, \
                                            outputLine, buf_xsize=red_band.XSize,
                                            buf_ysize=1, buf_type=gdal.GDT_Float32)
      # Delete the output line following write
    del outputLine
             
  
driver = gdal.GetDriverByName("GTiff")
dst_ds = driver.Create( "ndvi.tif", shape[1], shape[0], 1, gdal.GDT_Float32)
dst_ds.SetGeoTransform( geo )
dst_ds.SetProjection( proj ) 
dst_ds.GetRasterBand(1).WriteArray(ndvi)


# Allow division by zero
numpy.seterr(divide='ignore', invalid='ignore')

def calcGCI(filePath, outFilePath):
    # Open the inputted dataset
    dataset = gdal.Open( filePath, gdal.GA_ReadOnly )
    # Check the dataset was successfully opened
    if dataset is None:
        print ("The dataset could not opened")
        sys.exit(-1)

    # Create the output dataset
    outDataset = createOutputImage(outFilePath, dataset)
    # Check the datasets was successfully created.
    if outDataset is None:
        print ('Could not create output image')
        sys.exit(-1)

    # Get hold of the Green and NIR image bands from the image
    # Note that the image bands have been hard coded
    # in this case for the Landsat sensor. Green = 1
    # and NIR = 3 this might need to be changed if
    # data from another sensor was used.
    green_band = dataset.GetRasterBand(1) # Green BAND
    nir_band = dataset.GetRasterBand(3) # NIR BAND
    # Retrieve the number of lines within the image
    numLines = green_band.YSize
    # Loop through each line in turn.
    for line in range(numLines):
        # Define variable for output line.
        outputLine = ''
        # Read in data for the current line from the
        # image band representing the green wavelength
        red_scanline = green_band.ReadRaster( 0, line, red_band.XSize, 1, \
            green_band.XSize, 1, gdal.GDT_Float32 )
        # Unpack the line of data to be read as floating point data
        green_tuple = struct.unpack('f' * green_band.XSize, green_scanline)

        # Read in data for the current line from the
        # image band representing the NIR wavelength
        nir_scanline = nir_band.ReadRaster( 0, line, nir_band.XSize, 1, \
            nir_band.XSize, 1, gdal.GDT_Float32 )
        # Unpack the line of data to be read as floating point data
        nir_tuple = struct.unpack('f' * nir_band.XSize, nir_scanline)

        # Loop through the columns within the image
        for i in range(len(green_tuple)):
            #Calculate the GCI for the current pixel.
            ndvi_lower = (nir_tuple[i])
            ndvi_upper = (green_tuple[i])
            ndvi = 0
            #Be careful of zero divide
            if gci_lower == 0:
                gci = 0
            else:
                gci = gci_upper/gci_lower
                # Add the current pixel to the output line
                outputLine = outputLine + struct.pack('f', GCI)
          # Write the completed line to the output image
        outDataset.GetRasterBand(1).WriteRaster(0, line, green_band.XSize, 1, \
                                            outputLine, buf_xsize=green_band.XSize,
                                            buf_ysize=1, buf_type=gdal.GDT_Float32)
      # Delete the output line following write
    del outputLine
  
  
driver = gdal.GetDriverByName("GTiff")
dst_ds = driver.Create( "gci.tif", shape[1], shape[0], 1, gdal.GDT_Float32)
dst_ds.SetGeoTransform( geo )
dst_ds.SetProjection( proj ) 
dst_ds.GetRasterBand(1).WriteArray(gci)


if consulta == 1:
    NDVI_landsat5 = calcNDVI(landsat5)
    NDVI_landsat8 = calcNDVI(landsat8)
    difNDVI= NDVI_landsat8 - NDVI_landsat5
    print (difNDVI)
    
else:
    GCI_landsat5 = calcGCI(landsat5)
    GCI_landsat8 = calcGCI(landsat8)
    difNDVI= GCI_landsat8 - GCI_landsat5
    print (difGCI)


#Para poligonizar
RasterToPolygon_conversion(difGCI, poli_GCI.shp)
RasterToPolygon_conversion(difNDVI, poli_GCI.shp)
