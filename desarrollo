# -- coding: utf-8 -- 
# se va a proceder a observar el cambio en el uso ocupado por vegetacion con diferentes sensosres (landsat 5 y landsat 8), asi como con diferentes indices (NDVI y GCI)
import os, sys

try:
    from osgeo import ogr, gdal
    from osgeo.gdalconst import *
    import numpy as np
  
except ImportError:
    import ogr, gdal
    from gdalconst import *
    import numpy as np

# this allows GDAL to throw Python Exceptions
gdal.UseExceptions()

#definimos el directorio
os.chdir(r'C:')

##################################################################################################################
#abrimos las bandas


VerdeLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B3.tif')
RojoLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B4.tif')
NIRLS8 = gdal.Open(r'LT05_L1TP_200034_19930719_20180217_01_T1_B5.tif')


VerdeLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B2.tif')
RojoLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B3.tif')
NIRLS5 = gdal.Open(r'LC08_L1TP_200034_20210716_20210721_01_T1_B4.tif')

#de momento no lo utilizamos
#Componemos una imagen multibanda uniendo todas las bandas
arcpy.CompositeBands_management("VerdeLS8";"RojoLS8";"NIRLS8", "Landsat8_mb.tif") as landsat8
              
arcpy.CompositeBands_management("VerdeLS5";"RojoLS5";"NIRLS5", "Landsat5_mb.tif") as landsat5


#reproyeccion
reprojected_raster = arcpy.ia.Reproject(input_raster, {"wkid" : 25830})



#recortar al area de interes

#Lo vamos a recortar con un recorte que esta en shp hay que pasarlo a tif y tulizarlo para recortar las capas
arcpy.Clip_management('C:/TP5/EJ4/Mosaico.tif','#','C:/TP5/EJ4/recortado.tif','C:/TP5/EJ4/corredor_henares.shp')   

#conocer la informacion de la imagen
# lo separamos por bandas por si hubiera algun error en alguna de ellas
#dar a elegir con que satelite trabajaremos primero
inpunt ('Satelite con el que quiere trabajar primero (Landsat 5 o Landsat 8):  ')




#obtengo la informacion de la zona recortada
#la info de las bandas
#es un ejemplo, abria que depurar 
#Ruta actual
os.chdir(r'D:\osgeopy-data\Landsat\Washington')
band1_fn = 'p047r027_7t20000730_z10_nn10.tif'
band2_fn = 'p047r027_7t20000730_z10_nn20.tif'
band3_fn = 'p047r027_7t20000730_z10_nn30.tif'
 
in_ds = gdal.Open(band1_fn)
in_band = in_ds.GetRasterBand(1)
 
gtiff_driver = gdal.GetDriverByName('GTiff')
out_ds = gtiff_driver.Create('nat_color.tif',
         in_band.XSize, in_band.YSize, 3, in_band.DataType)
out_ds.SetProjection(in_ds.GetProjection())
out_ds.SetGeoTransform(in_ds.GetGeoTransform())
 
 # Leer los datos de la primera banda
in_data = in_band.ReadAsArray()
out_band = out_ds.GetRasterBand(3)
out_band.WriteArray(in_data)
 
 # Leer los datos de la segunda banda
in_ds = gdal.Open(band2_fn)
out_band = out_ds.GetRasterBand(2)
out_band.WriteArray(in_ds.ReadAsArray())
 
 # Leer los datos de la tercera banda
out_ds.GetRasterBand(1).WriteArray(
    gdal.Open(band3_fn).ReadAsArray())
 
out_ds.FlushCache()
for i in range(1, 4):
    out_ds.GetRasterBand(i).ComputeStatistics(False)
 
out_ds.BuildOverviews('average', [2, 4, 8, 16, 32])
del out_ds


#definir funcion para calcular indices NDVI y GCI
# obtener bandas y tamaños de bloques
band4 = ds.GetRasterBand(4)
band3 = ds.GetRasterBand(3)

blockSizes = band4.GetBlockSize()
xBlockSize = blockSizes[0]
yBlockSize = blockSizes[1]
print(yBlockSize, xBlockSize)

# crear la imagen de salida tipo ndvi
driver = gdal.GetDriverByName('GTiff')
# también: driver =  gdal.GetDriver('GTiff')
outds = driver.Create('indiceNDVI.tiff', cols, fils, 1, GDT_CFloat32)

if outds is None:
    print('No se puede crear el archivo de salida indice_NDVI.tiff')
    sys.exit(1)
  
bandOut = outds.GetRasterBand(1)

# iterar sobre las filas
for i in range(0, fils, yBlockSize):
    if i + yBlockSize < fils:
        numFilas = yBlockSize
    else:
        numFilas = fils - i
    
    # iterar sobre las columnas
    for j in range(0, cols, xBlockSize):
        if j + xBlockSize < cols:
            numCols = xBlockSize
        else:
            numCols = cols - j
            
        # read the data in
        data3 = band3.ReadAsArray(j, i, numCols, numFilas).astype(np.float)
        data4 = band4.ReadAsArray(j, i, numCols, numFilas).astype(np.float)
        
        # hacer los cálculos
        mascara = np.greater(data4 + data3, 0)
        ndvi = np.choose(mascara, (-99, (data4 - data3) / (data4 + data3)))
        
        # escribir los datos
        bandOut.WriteArray(ndvi, j, i)

# establecer los valores NoData
bandOut.SetNoDataValue(-99)

# descargar datos a disco 
bandOut.FlushCache()


# calcular estadísticas
statistics = bandOut.GetStatistics(0, 1)

# georeferenciar la imagen ndvi  set the projection
outds.SetGeoTransform(ds.GetGeoTransform())
outds.SetProjection(ds.GetProjection())

# construir piramides
gdal.SetConfigOption('HFA_USE_RRD', 'YES')
outds.BuildOverviews(overviewlist=[2,4,8,16])

del bandOut, band4, band3
ds = None
outds = None
